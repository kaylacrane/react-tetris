{"version":3,"sources":["images/universe.jpg","gameHelpers.js","components/styles/StyledControls.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledControls","styled","div","StyledTetrisWrapper","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","windowSize","window","screen","role","tabIndex","onKeyDown","e","onKeyUp","console","log","onMouseDown","event","parseInt","target","dataset","keycode","className","data-keycode","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7206acef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/universe.45feccda.jpg\";","export const STAGE_WIDTH = 16;\r\nexport const STAGE_HEIGHT = 24;\r\n\r\n//creates an array that contains an array of cells for each row\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //else if everything above is false\r\n  return false;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledControls = styled.div`\r\n  display: grid;\r\n  grid-template: auto auto auto / auto auto;\r\n  grid-row-gap: 10px;\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n  & > .control-button {\r\n    background: #333;\r\n    font-size: 60px;\r\n    border-radius: 50%;\r\n    text-align: center;\r\n    transition: color 0.8s linear;\r\n    outline: none;\r\n    border: none;\r\n    &:active {\r\n      color: gold;\r\n    }\r\n  }\r\n  & > .up-button {\r\n    grid-column: 2;\r\n  }\r\n  & > .left-button {\r\n    grid-column: 1;\r\n    grid-row: 1 / span 2;\r\n    align-self: center;\r\n  }\r\n  & > .right-button {\r\n    grid-column: 3;\r\n    grid-row: 1 / span 2;\r\n    align-self: center;\r\n  }\r\n  & > .down-button {\r\n    grid-column: 2;\r\n    grid-row: 2;\r\n  }\r\n  @media all and (min-width: 768px) {\r\n    & > .control-button {\r\n      font-size: 80px;\r\n    }\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nimport bgImage from \"../../images/universe.jpg\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px 0;\r\n  margin: 0 auto;\r\n  max-width: 300px;\r\n  @media all and (min-width: 768px) {\r\n    max-width: 600px;\r\n  }\r\n  @media all and (min-width: 1200px) {\r\n    align-items: flex-start;\r\n    flex-direction: row;\r\n    max-width: 900px;\r\n  }\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: flex;\r\n    padding: 0 20px;\r\n    flex-direction: column;\r\n    & .info-area {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    @media all and (min-width: 760px) {\r\n      max-width: 650px;\r\n      & .info-area {\r\n        flex-direction: row;\r\n        justify-content: space-evenly;\r\n      }\r\n    }\r\n    @media all and (min-width: 1200px) {\r\n      & .info-area {\r\n        flex-direction: column;\r\n        max-width: 100%;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const TETROMINOS = {\r\n  //0 sets up initial view\r\n  0: { shape: [[0]], color: \"0,0,0\" },\r\n  I: {\r\n    shape: [\r\n      //I represents placement so this is the long 4 cell bar\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"249, 160, 0\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"255, 214, 57\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"239, 188, 213\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"0, 124, 190\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"243, 0, 19\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n    ],\r\n    color: \"76, 42, 133\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"142, 65, 98\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((acc, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          /*returns -1 if value not found (if any empty cells/0 in row)*/\r\n          setRowsCleared((prev) => prev + 1); /*add row to rowsCleared state*/\r\n          acc.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          /*to add/unshift new empty row to start of array to replace cleared row*/\r\n          return acc;\r\n        }\r\n        /*return row as is if no full row*/\r\n        acc.push(row);\r\n        return acc;\r\n      }, []);\r\n\r\n    const updateStage = (prevStage) => {\r\n      // First clear the stage (for loop might be faster than map method)\r\n      const newStage = prevStage.map((row) =>\r\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      ); /*return empty cell if not marked as merged. otherwise cell stays as is because it has collided with another cell */\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            /*find out shape by checking for empty cells*/\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      //check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage((prev) => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-top-color: rgba(${(props) => props.color}, 1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledCell } from \"./styles/StyledCell\";\r\nimport { TETROMINOS } from \"../tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}></StyledCell>\r\n);\r\n\r\nexport default React.memo(\r\n  Cell\r\n); /*only rerenders when cells are changing with movement of tetromino. helps with optimization */\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${(props) => props.height},\r\n    calc(60vw / ${(props) => props.width})\r\n  );\r\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 220px;\r\n  background: #222;\r\n  margin-bottom: 20px;\r\n  min-height: fit-content;\r\n  @media all and (min-width: 768px) {\r\n    max-width: 55vw;\r\n  }\r\n  @media all and (min-width: 1200px) {\r\n    max-width: 40vw;\r\n    grid-template-rows: repeat(\r\n      ${(props) => props.height},\r\n      calc(25vw / ${(props) => props.width})\r\n    );\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { StyledStage } from \"./styles/StyledStage\";\r\n\r\n//map through stage to get rows and map through rows to get cells\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${(props) => (props.gameOver ? \"red\" : \"yellow\")};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n\r\n  @media all and (min-width: 768px) {\r\n    font-size: 1.25rem;\r\n    letter-spacing: 2px;\r\n  }\r\n  @media all and (min-width: 1200px) {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  @media all and (min-width: 760px) {\r\n    font-size: 1.5rem;\r\n    letter-spacing: 2px;\r\n    padding: 30px;\r\n    max-width: 50%;\r\n    margin: 0 auto;\r\n  }\r\n  @media all and (min-width: 1200px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from \"react\";\r\nimport { createStage, checkCollision } from \"../gameHelpers\";\r\n//styled components\r\nimport { StyledControls } from \"./styles/StyledControls\";\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\r\n//custom hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n//components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = (dir) => {\r\n    /*moves player left and right*/\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        console.log(\"interval on\");\r\n        /*40 is down arrow so this only resets when player releases down arrow*/\r\n        setDropTime(900 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000); /*starts up interval to make pieces fall*/\r\n    resetPlayer();\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const drop = () => {\r\n    //increase level/speed when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n      //increase speed too\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game Over - position <1 because we're at top of screen\r\n      if (player.pos.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({\r\n        x: 0,\r\n        y: 0,\r\n        collided: true,\r\n      }); /*when falling block hits another*/\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    // setDropTime(null); /* to stop interval when player presses key*/\r\n    drop();\r\n  };\r\n\r\n  useInterval(() => {\r\n    /*setInterval is not good to use with React. Better to use this custom hook*/\r\n    drop(); /*drop() is called at the rate of dropTime. if we set dropTime to null we can stop the interval*/\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        //left arrow key\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        //right arrow key\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        //down arrow key\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        /*rotates tetromino when up arrow is pressed. can implement another key for another rotation direciton*/\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n  const handleArrowButtons = (event) => {\r\n    const keyCode = parseInt(event.target.dataset.keycode);\r\n    move({ keyCode });\r\n  };\r\n  const windowSize = window.screen.width;\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={(e) => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        {windowSize < 1200 ? (\r\n          <StyledControls onMouseDown={handleArrowButtons}>\r\n            <button\r\n              className=\"up-button control-button fas fa-arrow-alt-circle-up\"\r\n              data-keycode=\"38\"\r\n            ></button>\r\n            <button\r\n              className=\"left-button control-button fas fa-arrow-alt-circle-left\"\r\n              data-keycode=\"37\"\r\n            ></button>\r\n            <button\r\n              className=\"right-button control-button fas fa-arrow-alt-circle-right\"\r\n              data-keycode=\"39\"\r\n            ></button>\r\n            <button\r\n              className=\"down-button control-button fas fa-arrow-alt-circle-down\"\r\n              data-keycode=\"40\"\r\n            ></button>\r\n          </StyledControls>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div className=\"info-area\">\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from \"react\";\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    //position\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    //turn rows into columns\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n    //reverse each row to get a rotated matrix/tetromino\r\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n    //removes rotate out of view and rotate over other tetromino problems\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      //back and forth movement to check if can rotate\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        //rotate tetromino back if it's going to collide\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: {\r\n        x: STAGE_WIDTH / 2 - 2,\r\n        y: 0,\r\n      },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [\r\n    40,\r\n    100,\r\n    300,\r\n    1200,\r\n  ]; /*scores for calculating points by number of rows cleared*/\r\n\r\n  const calcScore = useCallback(() => {\r\n    if (rowsCleared > 0) {\r\n      /*if it's greater than 0 we know we have cleared some rows and scored points*/\r\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows((prev) => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\r\nimport Tetris from \"./components/Tetris\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}